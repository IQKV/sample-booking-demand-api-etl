# This configuration is intended for demo purpose
version : '3.8'
services :
  mysql :
    image : mysql:5.7.34
    container_name : bookingdb-demo-mysql
    restart : unless-stopped
    environment :
      - MYSQL_DATABASE=demo_db
      - MYSQL_USER=demo
      - MYSQL_PASSWORD=demo
      - MYSQL_ROOT_PASSWORD=demo_root
      - TZ=UTC

  rabbitmq :
    container_name : bookingdb-demo-rabbitmq
    image : rabbitmq:3.8-management-alpine
    restart : unless-stopped
    ports :
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment :
      - RABBITMQ_DEFAULT_USER=demo
      - RABBITMQ_DEFAULT_PASS=demo


  bookingdb-init-container-service:
    image: "docker-registry.ujar.org/ujar/micro-k8s-bookingdb-init-container-service:latest"
    container_name: bookingdb-demo-init-container-service
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on :
      - mysql
    environment:
      - DATASOURCE_USERNAME=demo
      - DATASOURCE_PASSWORD=demo
      - DATASOURCE_URL=jdbc:mysql://bookingdb-demo-mysql:3306/demo_db

  bookingdb-dashboard-service:
    image: "docker-registry.ujar.org/ujar/micro-k8s-bookingdb-dashboard-service:latest"
    container_name: bookingdb-demo-dashboard-service
    restart: unless-stopped
    depends_on :
      - mysql
      - rabbitmq
      - bookingdb-init-container-service
    ports :
      - "8080:8080"
    environment:
      - DATASOURCE_USERNAME=demo
      - DATASOURCE_PASSWORD=demo
      - DATASOURCE_URL=jdbc:mysql://bookingdb-demo-mysql:3306/demo_db
      - RABBITMQ_HOST=bookingdb-demo-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=demo
      - RABBITMQ_PASSWORD=demo

  bookingdb-importer-service:
    image: "docker-registry.ujar.org/ujar/micro-k8s-bookingdb-importer-service:latest"
    container_name: bookingdb-demo-importer-service
    restart: unless-stopped
    depends_on :
      - mysql
      - rabbitmq
      - bookingdb-init-container-service
      - bookingdb-dashboard-service
    ports :
      - "8081:8080"
    environment:
      - DATASOURCE_USERNAME=demo
      - DATASOURCE_PASSWORD=demo
      - DATASOURCE_URL=jdbc:mysql://bookingdb-demo-mysql:3306/demo_db
      - RABBITMQ_HOST=bookingdb-demo-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=demo
      - RABBITMQ_PASSWORD=demo

  prometheus :
    container_name : bookingdb-demo-prometheus
    image : prom/prometheus:v2.32.1
    volumes :
      - ./docker/prometheus/:/etc/prometheus/
    command :
      - '--config.file=/etc/prometheus/prometheus.yml'
    # If you want to expose these ports outside your dev PC,
    # remove the "127.0.0.1:" prefix
    ports :
      - 127.0.0.1:9090:9090
    # On MacOS, remove next line and replace localhost by host.docker.internal in docker/prometheus/prometheus.yml and
    # docker/grafana/provisioning/datasources/datasource.yml
    network_mode : 'host' # to test locally running service
  grafana :
    container_name : bookingdb-demo-grafana
    image : grafana/grafana:8.3.3
    volumes :
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    environment :
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    # If you want to expose these ports outside your dev PC,
    # remove the "127.0.0.1:" prefix
    ports :
      - 127.0.0.1:3000:3000
    # On MacOS, remove next line and replace localhost by host.docker.internal in docker/prometheus/prometheus.yml and
    # docker/grafana/provisioning/datasources/datasource.yml
    network_mode : 'host' # to test locally running service
